import pandas as pd
from transformers import BartForConditionalGeneration, BartTokenizer
from tqdm import tqdm
from nltk.translate.bleu_score import corpus_bleu

# Loads the trained BART model
model_path = 'trained_bart_model'
model = BartForConditionalGeneration.from_pretrained(model_path)
tokenizer = BartTokenizer.from_pretrained('trained_bart_tokenizer')

# Load the test CSV containg 21 rows of data to test the trained model 
test_csv_path = 'test_data.csv'
test_df = pd.read_csv(test_csv_path)

# Function to generate translations using the trained BART model
def generate_translations(model, tokenizer, creole_text, max_length=128):
    input_ids = tokenizer.encode(creole_text, return_tensors='pt', truncation=True, max_length=max_length)
    output_ids = model.generate(input_ids, max_length=max_length, num_beams=5, length_penalty=0.6, no_repeat_ngram_size=2)
    translated_text = tokenizer.decode(output_ids[0], skip_special_tokens=True)
    return translated_text

# Generate translations for the test set
test_df['generated_english'] = test_df['Creole'].apply(lambda x: generate_translations(model, tokenizer, x))



# Prints the Creole and English columns from the test data csv file and the English translation generated by the model
for index, row in test_df.iterrows():
    print(f"Creole: {row['Creole']}")
    print(f"Reference English: {row['English']}")
    print(f"Generated English: {row['generated_english']}")
    print("\n")

# Calculates BLEU score for accuracy by comparing each word of the generated translation and English translation 
reference_corpus = test_df['English'].apply(lambda x: [x.split()])  # Converts each reference sentence to a list of words
generated_corpus = test_df['generated_english'].apply(lambda x: x.split())  # Converts each generated sentence to a list of words

# Calculates BLEU score
bleu_score = corpus_bleu(reference_corpus, generated_corpus)
accuracy = bleu_score * 100.0  # Multiply by 100 for percentage

print(f'BLEU Score (Accuracy): {accuracy:.2f}%')

